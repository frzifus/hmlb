---
ï»¿kind: Deployment
apiVersion: apps/v1
metadata:
  name: llamastack
  namespace: llm
spec:
  selector:
    matchLabels:
      app: llamastack
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        instrumentation.opentelemetry.io/inject-sdk: "true"
      labels:
        app: llamastack
    spec:
      volumes:
        - name: run-config-volume
          configMap:
            name: run-config
            defaultMode: 420
        - name: llama-persist
          persistentVolumeClaim:
            claimName: llama-persist
        - name: cache
          emptyDir: {}
        - name: pythain
          emptyDir: {}
      containers:
        - resources: {}
          terminationMessagePath: /dev/termination-log
          name: llamastack
          env:
            - name: MAX_TOKENS
              value: '128000'
            - name: VLLM_MAX_TOKENS
              value: '128000'
            # - name: GRANITE_URL
            #   value: 'http://granite-8b:8000'
            # - name: GRANITE_MODEL
            #   value: ibm-granite/granite-3.2-8b-instruct
            - name: LLAMA3B_MODEL
              value: meta-llama/Llama-3.2-3B-Instruct
            - name: LLAMA3B_URL
              value: 'http://llama32-3b:8000'
            - name: VLLM_API_TOKEN
              value: fake
            - name: MILVUS_DB_PATH
              value: milvus.db
          ports:
            - containerPort: 8321
              protocol: TCP
          volumeMounts:
            - name: pythain
              mountPath: /pythainlp-data
            - name: run-config-volume
              mountPath: /app-config
            - name: llama-persist
              mountPath: /.llama
            - name: cache
              mountPath: /.cache
          terminationMessagePolicy: File
          image: 'quay.io/redhat-et/llama:vllm-0.2.2'
          args:
            - '--config'
            - /app-config/config.yaml
      securityContext: {}
